// This file was auto-generated by ML.NET Model Builder.
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML.Trainers.FastTree;

namespace AwayScoreModel.ConsoleApp
{
    public partial class AwayScoreModel
    {
        public const string RetrainFilePath = @"/Users/mattjp/Documents/projects/cbb-learn/src/Data/stats_v2.csv";
        public const char RetrainSeparatorChar = ',';
        public const bool RetrainHasHeader = true;

        /// <summary>
        /// Train a new model with the provided dataset.
        /// </summary>
        /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        public static void Train(string outputModelPath, string inputDataFilePath = RetrainFilePath, char separatorChar = RetrainSeparatorChar, bool hasHeader = RetrainHasHeader)
        {
            var mlContext = new MLContext();

            var data = LoadIDataViewFromFile(mlContext, inputDataFilePath, separatorChar, hasHeader);
            var model = RetrainModel(mlContext, data);
            SaveModel(mlContext, model, data, outputModelPath);
        }

        /// <summary>
        /// Load an IDataView from a file path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        /// <returns>IDataView with loaded training data.</returns>
        public static IDataView LoadIDataViewFromFile(MLContext mlContext, string inputDataFilePath, char separatorChar, bool hasHeader)
        {
            return mlContext.Data.LoadFromTextFile<ModelInput>(inputDataFilePath, separatorChar, hasHeader);
        }



        /// <summary>
        /// Save a model at the specified path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="model">Model to save.</param>
        /// <param name="data">IDataView used to train the model.</param>
        /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            // Pull the data schema from the IDataView used for training the model
            DataViewSchema dataViewSchema = data.Schema;

            using (var fs = File.Create(modelSavePath))
            {
                mlContext.Model.Save(model, dataViewSchema, fs);
            }
        }


        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }


        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new[] { new InputOutputColumnPair(@"home", @"home"), new InputOutputColumnPair(@"away", @"away"), new InputOutputColumnPair(@"homePoints", @"homePoints"), new InputOutputColumnPair(@"homeBlocks", @"homeBlocks"), new InputOutputColumnPair(@"homeDefensiveRebounds", @"homeDefensiveRebounds"), new InputOutputColumnPair(@"homeSteals", @"homeSteals"), new InputOutputColumnPair(@"homeTurnoverPoints", @"homeTurnoverPoints"), new InputOutputColumnPair(@"homeDisqualifications", @"homeDisqualifications"), new InputOutputColumnPair(@"homeFlagrantFouls", @"homeFlagrantFouls"), new InputOutputColumnPair(@"homeFouls", @"homeFouls"), new InputOutputColumnPair(@"homeEjections", @"homeEjections"), new InputOutputColumnPair(@"homeTechnicalFouls", @"homeTechnicalFouls"), new InputOutputColumnPair(@"homeRebounds", @"homeRebounds"), new InputOutputColumnPair(@"homeAssistTurnoverRatio", @"homeAssistTurnoverRatio"), new InputOutputColumnPair(@"homeStealFoulRatio", @"homeStealFoulRatio"), new InputOutputColumnPair(@"homeBlockFoulRatio", @"homeBlockFoulRatio"), new InputOutputColumnPair(@"homeTeamAssistTurnoverRatio", @"homeTeamAssistTurnoverRatio"), new InputOutputColumnPair(@"homeStealTurnoverRatio", @"homeStealTurnoverRatio"), new InputOutputColumnPair(@"homeGamesPlayed", @"homeGamesPlayed"), new InputOutputColumnPair(@"homeGamesStarted", @"homeGamesStarted"), new InputOutputColumnPair(@"homeDoubleDouble", @"homeDoubleDouble"), new InputOutputColumnPair(@"homeTripleDouble", @"homeTripleDouble"), new InputOutputColumnPair(@"homeAssists", @"homeAssists"), new InputOutputColumnPair(@"homeFieldGoals", @"homeFieldGoals"), new InputOutputColumnPair(@"homeFieldGoalsAttempted", @"homeFieldGoalsAttempted"), new InputOutputColumnPair(@"homeFieldGoalsMade", @"homeFieldGoalsMade"), new InputOutputColumnPair(@"homeFieldGoalPct", @"homeFieldGoalPct"), new InputOutputColumnPair(@"homeFreeThrows", @"homeFreeThrows"), new InputOutputColumnPair(@"homeFreeThrowPct", @"homeFreeThrowPct"), new InputOutputColumnPair(@"homeFreeThrowsAttempted", @"homeFreeThrowsAttempted"), new InputOutputColumnPair(@"homeFreeThrowsMade", @"homeFreeThrowsMade"), new InputOutputColumnPair(@"homeOffensiveRebounds", @"homeOffensiveRebounds"), new InputOutputColumnPair(@"homeTurnovers", @"homeTurnovers"), new InputOutputColumnPair(@"homeThreePointFieldGoalsAttempted", @"homeThreePointFieldGoalsAttempted"), new InputOutputColumnPair(@"homeThreePointFieldGoalsMade", @"homeThreePointFieldGoalsMade"), new InputOutputColumnPair(@"homeTeamTurnovers", @"homeTeamTurnovers"), new InputOutputColumnPair(@"homePointsInPaint", @"homePointsInPaint"), new InputOutputColumnPair(@"homeFastBreakPoints", @"homeFastBreakPoints"), new InputOutputColumnPair(@"homeOffensiveReboundPct", @"homeOffensiveReboundPct"), new InputOutputColumnPair(@"homeEstimatedPossessions", @"homeEstimatedPossessions"), new InputOutputColumnPair(@"homePointsPerEstimatedPossessions", @"homePointsPerEstimatedPossessions"), new InputOutputColumnPair(@"homeThreePointFieldGoalPct", @"homeThreePointFieldGoalPct"), new InputOutputColumnPair(@"homeTwoPointFieldGoalsMade", @"homeTwoPointFieldGoalsMade"), new InputOutputColumnPair(@"homeTwoPointFieldGoalsAttempted", @"homeTwoPointFieldGoalsAttempted"), new InputOutputColumnPair(@"homeTwoPointFieldGoalPct", @"homeTwoPointFieldGoalPct"), new InputOutputColumnPair(@"homeShootingEfficiency", @"homeShootingEfficiency"), new InputOutputColumnPair(@"homeScoringEfficiency", @"homeScoringEfficiency"), new InputOutputColumnPair(@"homeLargestLead", @"homeLargestLead"), new InputOutputColumnPair(@"awayBlocks", @"awayBlocks"), new InputOutputColumnPair(@"awayDefensiveRebounds", @"awayDefensiveRebounds"), new InputOutputColumnPair(@"awaySteals", @"awaySteals"), new InputOutputColumnPair(@"awayTurnoverPoints", @"awayTurnoverPoints"), new InputOutputColumnPair(@"awayDisqualifications", @"awayDisqualifications"), new InputOutputColumnPair(@"awayFlagrantFouls", @"awayFlagrantFouls"), new InputOutputColumnPair(@"awayFouls", @"awayFouls"), new InputOutputColumnPair(@"awayEjections", @"awayEjections"), new InputOutputColumnPair(@"awayTechnicalFouls", @"awayTechnicalFouls"), new InputOutputColumnPair(@"awayRebounds", @"awayRebounds"), new InputOutputColumnPair(@"awayAssistTurnoverRatio", @"awayAssistTurnoverRatio"), new InputOutputColumnPair(@"awayStealFoulRatio", @"awayStealFoulRatio"), new InputOutputColumnPair(@"awayBlockFoulRatio", @"awayBlockFoulRatio"), new InputOutputColumnPair(@"awayTeamAssistTurnoverRatio", @"awayTeamAssistTurnoverRatio"), new InputOutputColumnPair(@"awayStealTurnoverRatio", @"awayStealTurnoverRatio"), new InputOutputColumnPair(@"awayGamesPlayed", @"awayGamesPlayed"), new InputOutputColumnPair(@"awayGamesStarted", @"awayGamesStarted"), new InputOutputColumnPair(@"awayDoubleDouble", @"awayDoubleDouble"), new InputOutputColumnPair(@"awayTripleDouble", @"awayTripleDouble"), new InputOutputColumnPair(@"awayAssists", @"awayAssists"), new InputOutputColumnPair(@"awayFieldGoals", @"awayFieldGoals"), new InputOutputColumnPair(@"awayFieldGoalsAttempted", @"awayFieldGoalsAttempted"), new InputOutputColumnPair(@"awayFieldGoalsMade", @"awayFieldGoalsMade"), new InputOutputColumnPair(@"awayFieldGoalPct", @"awayFieldGoalPct"), new InputOutputColumnPair(@"awayFreeThrows", @"awayFreeThrows"), new InputOutputColumnPair(@"awayFreeThrowPct", @"awayFreeThrowPct"), new InputOutputColumnPair(@"awayFreeThrowsAttempted", @"awayFreeThrowsAttempted"), new InputOutputColumnPair(@"awayFreeThrowsMade", @"awayFreeThrowsMade"), new InputOutputColumnPair(@"awayOffensiveRebounds", @"awayOffensiveRebounds"), new InputOutputColumnPair(@"awayTurnovers", @"awayTurnovers"), new InputOutputColumnPair(@"awayThreePointFieldGoalsAttempted", @"awayThreePointFieldGoalsAttempted"), new InputOutputColumnPair(@"awayThreePointFieldGoalsMade", @"awayThreePointFieldGoalsMade"), new InputOutputColumnPair(@"awayTeamTurnovers", @"awayTeamTurnovers"), new InputOutputColumnPair(@"awayPointsInPaint", @"awayPointsInPaint"), new InputOutputColumnPair(@"awayFastBreakPoints", @"awayFastBreakPoints"), new InputOutputColumnPair(@"awayOffensiveReboundPct", @"awayOffensiveReboundPct"), new InputOutputColumnPair(@"awayEstimatedPossessions", @"awayEstimatedPossessions"), new InputOutputColumnPair(@"awayPointsPerEstimatedPossessions", @"awayPointsPerEstimatedPossessions"), new InputOutputColumnPair(@"awayThreePointFieldGoalPct", @"awayThreePointFieldGoalPct"), new InputOutputColumnPair(@"awayTwoPointFieldGoalsMade", @"awayTwoPointFieldGoalsMade"), new InputOutputColumnPair(@"awayTwoPointFieldGoalsAttempted", @"awayTwoPointFieldGoalsAttempted"), new InputOutputColumnPair(@"awayTwoPointFieldGoalPct", @"awayTwoPointFieldGoalPct"), new InputOutputColumnPair(@"awayShootingEfficiency", @"awayShootingEfficiency"), new InputOutputColumnPair(@"awayScoringEfficiency", @"awayScoringEfficiency"), new InputOutputColumnPair(@"awayLargestLead", @"awayLargestLead") })
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new[] { @"home", @"away", @"homePoints", @"homeBlocks", @"homeDefensiveRebounds", @"homeSteals", @"homeTurnoverPoints", @"homeDisqualifications", @"homeFlagrantFouls", @"homeFouls", @"homeEjections", @"homeTechnicalFouls", @"homeRebounds", @"homeAssistTurnoverRatio", @"homeStealFoulRatio", @"homeBlockFoulRatio", @"homeTeamAssistTurnoverRatio", @"homeStealTurnoverRatio", @"homeGamesPlayed", @"homeGamesStarted", @"homeDoubleDouble", @"homeTripleDouble", @"homeAssists", @"homeFieldGoals", @"homeFieldGoalsAttempted", @"homeFieldGoalsMade", @"homeFieldGoalPct", @"homeFreeThrows", @"homeFreeThrowPct", @"homeFreeThrowsAttempted", @"homeFreeThrowsMade", @"homeOffensiveRebounds", @"homeTurnovers", @"homeThreePointFieldGoalsAttempted", @"homeThreePointFieldGoalsMade", @"homeTeamTurnovers", @"homePointsInPaint", @"homeFastBreakPoints", @"homeOffensiveReboundPct", @"homeEstimatedPossessions", @"homePointsPerEstimatedPossessions", @"homeThreePointFieldGoalPct", @"homeTwoPointFieldGoalsMade", @"homeTwoPointFieldGoalsAttempted", @"homeTwoPointFieldGoalPct", @"homeShootingEfficiency", @"homeScoringEfficiency", @"homeLargestLead", @"awayBlocks", @"awayDefensiveRebounds", @"awaySteals", @"awayTurnoverPoints", @"awayDisqualifications", @"awayFlagrantFouls", @"awayFouls", @"awayEjections", @"awayTechnicalFouls", @"awayRebounds", @"awayAssistTurnoverRatio", @"awayStealFoulRatio", @"awayBlockFoulRatio", @"awayTeamAssistTurnoverRatio", @"awayStealTurnoverRatio", @"awayGamesPlayed", @"awayGamesStarted", @"awayDoubleDouble", @"awayTripleDouble", @"awayAssists", @"awayFieldGoals", @"awayFieldGoalsAttempted", @"awayFieldGoalsMade", @"awayFieldGoalPct", @"awayFreeThrows", @"awayFreeThrowPct", @"awayFreeThrowsAttempted", @"awayFreeThrowsMade", @"awayOffensiveRebounds", @"awayTurnovers", @"awayThreePointFieldGoalsAttempted", @"awayThreePointFieldGoalsMade", @"awayTeamTurnovers", @"awayPointsInPaint", @"awayFastBreakPoints", @"awayOffensiveReboundPct", @"awayEstimatedPossessions", @"awayPointsPerEstimatedPossessions", @"awayThreePointFieldGoalPct", @"awayTwoPointFieldGoalsMade", @"awayTwoPointFieldGoalsAttempted", @"awayTwoPointFieldGoalPct", @"awayShootingEfficiency", @"awayScoringEfficiency", @"awayLargestLead" }))
                                    .Append(mlContext.Regression.Trainers.FastForest(new FastForestRegressionTrainer.Options() { NumberOfTrees = 226, NumberOfLeaves = 4, FeatureFraction = 0.83490324F, LabelColumnName = @"awayPoints", FeatureColumnName = @"Features" }));

            return pipeline;
        }
    }
}
